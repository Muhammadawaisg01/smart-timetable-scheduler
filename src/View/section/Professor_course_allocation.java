/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.section;

import Enums.Professor_Allocation;
import Model.Queries;
import Model.professor.Professor_Section_Allocation;
import static View.Alerts.alert;
import static View.MainFrame.create_section_panel1;
import static View.MainFrame.professor_course_allocation1;
import static db.DBConnection.getConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author muhammad awais 1
 */
public class Professor_course_allocation extends javax.swing.JPanel {

    /**
     * Creates new form Professor_course_allocation
     */
    public Professor_course_allocation() {
        initComponents();
    }

    // display section ID
    public static void displaySectionID(String id) {
        section_name.setText(id);
    }

    // display section courses
    public static void displayCourses(ArrayList<String> courses) {
        String[] crs = new String[courses.size()];
        int i = 0;
        for (String c : courses) {
            crs[i] = c;
            i++;
        }
        courses_dropdown.setModel(new DefaultComboBoxModel(crs));
    }

    // display all professors
    public static void displayProfessors(ArrayList<String> professors) {
        String[] prof = new String[professors.size()];
        int i = 0;
        for (String c : professors) {
            prof[i] = c;
            i++;
        }
        professor_dropdown.setModel(new DefaultComboBoxModel(prof));
    }

    /**
     *
     * @param courseCode Course to be added
     * @param type Lecture type
     * @return true: if course has been already assigned a professor false: if
     * course has not been assigned a professor
     */
    private boolean checkDuplication(String courseCode, Professor_Allocation type) {
        for (Professor_Section_Allocation professor_Section_Allocation : allocations) {
            if (professor_Section_Allocation.getCourse_code().equalsIgnoreCase(courseCode)
                    && professor_Section_Allocation.getAllocation() == type) {
                return true;
            }
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allocated_textarea = new javax.swing.JTextArea();
        jLabel95 = new javax.swing.JLabel();
        jLabel96 = new javax.swing.JLabel();
        lecture_radio = new javax.swing.JRadioButton();
        save_allocation = new javax.swing.JButton();
        professor_dropdown = new javax.swing.JComboBox<>();
        allocate_btn = new javax.swing.JButton();
        section_name = new javax.swing.JTextField();
        jLabel101 = new javax.swing.JLabel();
        jLabel102 = new javax.swing.JLabel();
        courses_dropdown = new javax.swing.JComboBox<>();
        both_radio = new javax.swing.JRadioButton();
        lab_radio = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(50, 50, 50));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(32767, 35000));
        setPreferredSize(new java.awt.Dimension(409, 500));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(50, 50, 50));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        allocated_textarea.setBackground(new java.awt.Color(50, 50, 50));
        allocated_textarea.setColumns(10);
        allocated_textarea.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        allocated_textarea.setForeground(new java.awt.Color(255, 255, 255));
        allocated_textarea.setRows(5);
        allocated_textarea.setText("Allocations:");
        jScrollPane1.setViewportView(allocated_textarea);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 630, 170));

        jLabel95.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel95.setForeground(new java.awt.Color(255, 255, 255));
        jLabel95.setText("A s s i g n  P r o f e s s o r s  t o  S e c t i o n  C o u r s e s");
        jPanel1.add(jLabel95, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 650, 40));

        jLabel96.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel96.setForeground(new java.awt.Color(0, 102, 153));
        jLabel96.setText("Professor");
        jPanel1.add(jLabel96, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 160, 160, 30));

        lecture_radio.setBackground(new java.awt.Color(50, 50, 50));
        lecture_radio.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lecture_radio.setForeground(new java.awt.Color(255, 255, 255));
        lecture_radio.setText("Lecture");
        lecture_radio.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 128, 153), 1, true));
        lecture_radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lecture_radioActionPerformed(evt);
            }
        });
        jPanel1.add(lecture_radio, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 240, 100, 30));

        save_allocation.setBackground(new java.awt.Color(0, 102, 153));
        save_allocation.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        save_allocation.setForeground(new java.awt.Color(255, 255, 255));
        save_allocation.setText("Save Allocation");
        save_allocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_allocationActionPerformed(evt);
            }
        });
        jPanel1.add(save_allocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 540, 220, 50));

        professor_dropdown.setBackground(new java.awt.Color(50, 50, 50));
        professor_dropdown.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        professor_dropdown.setForeground(new java.awt.Color(255, 255, 255));
        professor_dropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"" }));
        jPanel1.add(professor_dropdown, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 190, 270, 40));

        allocate_btn.setBackground(new java.awt.Color(0, 102, 153));
        allocate_btn.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        allocate_btn.setForeground(new java.awt.Color(255, 255, 255));
        allocate_btn.setText("Assign Professor");
        allocate_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocate_btnActionPerformed(evt);
            }
        });
        jPanel1.add(allocate_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 290, 210, 40));

        section_name.setEditable(false);
        section_name.setBackground(new java.awt.Color(50, 50, 50));
        section_name.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        section_name.setForeground(new java.awt.Color(255, 255, 255));
        section_name.setEnabled(false);
        section_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                section_nameActionPerformed(evt);
            }
        });
        jPanel1.add(section_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 270, 40));

        jLabel101.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel101.setForeground(new java.awt.Color(0, 102, 153));
        jLabel101.setText("Courses");
        jPanel1.add(jLabel101, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 150, 30));

        jLabel102.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel102.setForeground(new java.awt.Color(0, 102, 153));
        jLabel102.setText("Section");
        jPanel1.add(jLabel102, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 150, 40));

        courses_dropdown.setBackground(new java.awt.Color(50, 50, 50));
        courses_dropdown.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        courses_dropdown.setForeground(new java.awt.Color(255, 255, 255));
        courses_dropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"" }));
        jPanel1.add(courses_dropdown, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 270, 40));

        both_radio.setBackground(new java.awt.Color(50, 50, 50));
        both_radio.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        both_radio.setForeground(new java.awt.Color(255, 255, 255));
        both_radio.setText("Both");
        both_radio.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 128, 153), 1, true));
        both_radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                both_radioActionPerformed(evt);
            }
        });
        jPanel1.add(both_radio, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 240, 70, 30));

        lab_radio.setBackground(new java.awt.Color(50, 50, 50));
        lab_radio.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lab_radio.setForeground(new java.awt.Color(255, 255, 255));
        lab_radio.setText("Lab");
        lab_radio.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 128, 153), 1, true));
        lab_radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_radioActionPerformed(evt);
            }
        });
        jPanel1.add(lab_radio, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 240, 70, 30));

        jScrollPane2.setViewportView(jPanel1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 520));
    }// </editor-fold>//GEN-END:initComponents

    private void allocate_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocate_btnActionPerformed
        String course = courses_dropdown.getSelectedItem().toString();
        String professor = professor_dropdown.getSelectedItem().toString();
        String courseCode = Queries.getCourseCode(course);
        int professorID = Queries.getProfessorID(professor);
        // assign both lecture and lab to a professor
        if (lectureType.equalsIgnoreCase("Both")) {
            // cours has no lab
            if (Queries.duplicate("select * from course where course_code = '" + courseCode + "' and hasLab = 'false'")) {
                alert("Course has no lab");
                return;
            }
            // course has been assigned a professor already
            if (checkDuplication(courseCode, Professor_Allocation.LAB) || checkDuplication(courseCode, Professor_Allocation.LECTURE)) {
                alert("Can not assign two professors to a course");
                return;
            }
            allocations.add(new Professor_Section_Allocation(professorID, courseCode, Professor_Allocation.LECTURE));
            allocations.add(new Professor_Section_Allocation(professorID, courseCode, Professor_Allocation.LAB));
            allocated_textarea.append("\n" + professor + "\t" + course + "\tLecture");
            allocated_textarea.append("\n" + professor + "\t" + course + "\tLab");
        } else if (lectureType.equalsIgnoreCase("Lab")) {   // Assign professor to course lab
            // course has no lab
            if (Queries.duplicate("select * from course where course_code = '" + courseCode + "' and hasLab = 'false'")) {
                alert("Course has no lab");
                return;
            }
            // course has already assigned professor
            if (checkDuplication(courseCode, Professor_Allocation.LAB)) {
                alert("Can not assign two professors to a course lab");
                return;
            }
            allocations.add(new Professor_Section_Allocation(professorID, courseCode, Professor_Allocation.LAB));
            allocated_textarea.append("\n" + professor + "\t" + course + "\tLab");
        } else if (lectureType.equalsIgnoreCase("Lecture")) {   // asssign professor of lecture 
            if (checkDuplication(courseCode, Professor_Allocation.LECTURE)) {
                alert("Can not assign two professors to a course lecture");
                return;
            }
            allocations.add(new Professor_Section_Allocation(professorID, courseCode, Professor_Allocation.LECTURE));
            allocated_textarea.append("\n" + professor + "\t" + course + "\tLecture");
        } else {
            JOptionPane.showMessageDialog(null, "Select lecture type!");
        }

    }//GEN-LAST:event_allocate_btnActionPerformed

    private void section_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_section_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_section_nameActionPerformed

    private void lecture_radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lecture_radioActionPerformed
        if (lecture_radio.isSelected()) {
            lectureType = "Lecture";
            both_radio.setSelected(false);
            lab_radio.setSelected(false);
        }
    }//GEN-LAST:event_lecture_radioActionPerformed

    private void both_radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_both_radioActionPerformed
        if (both_radio.isSelected()) {
            lectureType = "Both";
            lecture_radio.setSelected(false);
            lab_radio.setSelected(false);
        }
    }//GEN-LAST:event_both_radioActionPerformed

    private void lab_radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_radioActionPerformed
        if (lab_radio.isSelected()) {
            lectureType = "Lab";
            both_radio.setSelected(false);
            lecture_radio.setSelected(false);
        }
    }//GEN-LAST:event_lab_radioActionPerformed

    private void save_allocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_allocationActionPerformed
        Connection conn = getConnection();
        PreparedStatement stmt = null;
        String q = "INSERT INTO section_professor_allocation "
                + "(section_id,\n"
                + "course_code,\n"
                + "lab_or_theory,\n"
                + "professor_id)"
                + " VALUES "
                + "(?, ?, ?, ?)";
        // check if all courses has been assigned professors
        int totalCourses = courses_dropdown.getModel().getSize();
        if (allocations.size() < totalCourses) {
            alert("Please assign professor to all courses");
            return;
        }
        try {
            for (Professor_Section_Allocation allocation : allocations) {
                stmt = conn.prepareStatement(q);
                stmt.setString(1, section_name.getText());
                stmt.setString(2, allocation.getCourse_code());
                stmt.setString(3, allocation.getAllocation().name());
                stmt.setInt(4, allocation.getProf_id());
                stmt.execute();
            }
            JOptionPane.showMessageDialog(null, "Professors allocated successfully!");
            allocated_textarea.setText("Allocations:");
            allocations = new ArrayList<>();    
            professor_course_allocation1.setVisible(false);
            create_section_panel1.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Professor_course_allocation.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error in database!");
        }
    }//GEN-LAST:event_save_allocationActionPerformed

    // custom veriables
    private String lectureType = "";
    private ArrayList<Professor_Section_Allocation> allocations = new ArrayList<>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allocate_btn;
    private javax.swing.JTextArea allocated_textarea;
    private javax.swing.JRadioButton both_radio;
    private static javax.swing.JComboBox<String> courses_dropdown;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton lab_radio;
    private javax.swing.JRadioButton lecture_radio;
    private static javax.swing.JComboBox<String> professor_dropdown;
    private javax.swing.JButton save_allocation;
    private static javax.swing.JTextField section_name;
    // End of variables declaration//GEN-END:variables

}
